// grails test test-app functional: -inline

import spock.lang.*
import groovy.util.AntBuilder
import groovy.json.*
import grails.converters.JSON
import grails.util.Holders as HOLDER
import net.nosegrind.apitoolkit.Person

// SCAFFOLD name
class ${className}FunctionalSpec extends Specification {

	static Long primerId = 1
	
	static Long id = null
	static Long version = null
	static int user = 0

	// SCAFFOLD
	static LinkedHashMap fkeys = ['sectionId':0,'authorId':0]
	
	def output
	def errOutput
	
	def 'Validate User'() {
		// set these variables in your config or external properties file (preferable)
		String login = HOLDER.config.root.login
		String password = HOLDER.config.root.password
		Object json
		LinkedHashMap output = [:]
		
		when:
			// ### ADD: delete cookie.txt prior to running test
		
			def ant = new AntBuilder()
			ant.exec(outputProperty:"cmdOut",errorProperty:"cmdErr",resultProperty:"cmdExit",failonerror:"false",executable:"curl"){
				arg(line:"""--verbose --request POST --data "j_username=${login}&j_password=${password}&_spring_security_remember_me=checked" http://localhost:8080/api_v0.1/j_spring_security_check --cookie-jar cookies.txt""")
			}
			output = parseOutput(ant.project.properties.cmdErr)
			def personClass = HOLDER.getGrailsApplication().getDomainClass(HOLDER.config.grails.plugin.springsecurity.userLookup.userDomainClassName).clazz
			def principal = personClass.findByUsername(login)
			this.user = principal.id

		then:
			assert output.response.code.code == '302'
			assert output.response.code.message == 'Found'
	}

	// if 'Fail', check primer id
	def 'Populate foreign keys'(){
	  Object json
	  LinkedHashMap errOutput = [:]
	  // SCAFFOLD
	  def output = ['id', 'sectionId', 'statId', 'title','version']
	  
		when:
			def ant = new AntBuilder()
			ant.exec(outputProperty:"cmdOut",errorProperty:"cmdErr",resultProperty:"cmdExit",failonerror:"false",executable:"curl"){
				arg(line:"""--verbose --request GET --header "Content-Type: application/json" "http://localhost:8080/api_v0.1/post/show/${this.primerId}" --cookie cookies.txt""")
			}
			errOutput = parseOutput(ant.project.properties.cmdErr)
			json = new JsonSlurper().parseText(ant.project.properties.cmdOut)
			// SCAFFOLD
			this.fkeys.sectionId = (json.sectionId)?json.sectionId.toLong():null
			// SCAFFOLD
			this.fkeys.statId = (json.statId)?json.statId.toLong():null
		then:
			assert errOutput.response.code.code == '200'
			assert json.collect(){it.key} == output
	}
	
	${templateMethods['POST'].each(){ it+"/r/n" }}

	${templateMethods['GET'].each(){ it+"/r/n" }}

	${templateMethods['PUT'].each(){ it+"/r/n" }}
  
	${templateMethods['DELETE'].each(){ it+"/r/n" }}
  
  LinkedHashMap parseOutput(String output){
	  LinkedHashMap req = [:]
	  LinkedHashMap resp = [:]
	  output.splitEachLine("//"){ it ->
		  it.each(){ it2 ->
			  if(it2 =~ />.+/){
				  if(it2.size()>3){
					  it2 = it2[2..-1]
					  if(it2.contains(":")){
						  List temp = it2.split(":")
						  req[temp[0]] = (temp[1])?temp[1]:[]
					  }else{
						  List temp = it2.split(" ")
						  req['uri'] = ['method':temp[0],'uri':temp[1],'protocol':temp[2]]
					  }
				  }
			  }

			  if(it2 =~ /<.+/){
				  if(it2.size()>3){
					  it2 = it2[2..-1]
					  if(it2.contains(":")){
						  List temp = it2.split(":")
						  resp[temp[0]] = (temp[1])?temp[1]:[]
					  }else{
						  List temp = it2.split(" ")
						  resp['code'] = ['protocol':temp[0],'code':temp[1],'message':temp[2]]
					  }
				  }
			  }
		  }
	  }
	  return ['request':req,'response':resp]
  }

}